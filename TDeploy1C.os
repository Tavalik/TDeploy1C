// ********************************************************************************************
// Автор: Онянов Виталий (Tavalik.ru)
// Описание:
//	Выполняет различные сценарии по запуску 1С (и не только)
//	Поддерживаемые сценарии:
//
//	Общие:
//		Wait - Ждать
//		RunApp[1|2|3|4|5][NoWaitCompletion] - ЗапуститьПриложение[1|2|3|4|5][НеЖдатьЗавершения]
//		WriteStatusToFile - ЗаписатьСтатусВФайл
//			Записывает результат выполнения сценария в файл "TDeploy_Status.txt" в каталоге сценария: 
//			0 - ошибок не было, 1 - были ошибки
//	Сеансы:	
//		GetListOfSessions - ПолучитьСписокСеансов
//		CloseAllSessions - ЗавершитьВсеСеансы
//		LockStartSession - УстановитьБлокировкуНачалаСеансов
//		UnlockStartSessions - СнятьБлокировкуНачалаСеансов
//		LockScheduledJobs - УстановитьБлокировкуРегламентныхЗаданий
//		UnlockScheduledJobs - СнятьБлокировкуРегламентныхЗаданий
//	Запуск:
//		StartEnterprise[ThinClient][TestManager][WithProcessing[1|2|3|4|5]][ClearCache][NoWaitCompletion] 
//			- ЗапуститьПредприятие[ТонкийКлиент][МенеджерТестирования][СОбработкой[1|2|3|4|5]][ОчиститьКеш][НеЖдатьЗавершения]
//		StartDesigner[NoWaitCompletion] - ЗапуститьКонфигуратор[НеЖдатьЗавершения]
//	Конфигурация:
//		CheckChangesMainCfg - ПроверитьИзмененияОсновнойКонфигурации 
//			- В случае, если есть изменения, генерируется ошибка
//		UpdateDBCfg - ОбновитьКонфигурациюБазыДанных
//		DumpCfg - СохранитьКонфигурацию
//		LoadCfg - ЗагрузитьКонфигурацию
//		MergeCfg - ОбъединитьКонфигурацию 
//	Расширения:
//		LoadExtension[1|2|3|4|5] - ЗагрузитьРасширение[1|2|3|4|5]
//	Работа с хранилищем
//		CheckChangesInRepository - ПроверитьИзмененияВХранилище 
//			- В случае, если изменений нет, сценарий прекращается
//		ConfigurationRepositoryUpdateCfg - ОбновитьКонфигурациюИзХранилища
//		ConfigurationRepositoryLock - ЗахватитьОбъектыИзХранилища
//		ConfigurationRepositoryUnLock - ОтменитьЗахватОбъектовИзХранилища
//		ConfigurationRepositoryCommit[UnLock] - ПоместитьОбъектыВХранилище[ОтменитьЗахват]
//		ConfigurationRepositoryBindCfg - ПодключитьсяКХранилищу
//		ConfigurationRepositoryUnbindCfg  - ОтключитьсяОтХранилища
//		ConfigurationRepositoryDumpCfg - СохранитьКонфигурациюХранилища
//		ConfigurationRepositoryReport - ОтчетПоИсторииХранилища
//	Файлы:
//		DeleteFiles[Cf|dt|Bak|Trn][СurrentBase] - УдалитьФайлы[Cf|dt|Bak|Trn][ТекущейБазы]
//		CreateFileForRepositoryLockFromReport - СоздатьФайлДляЗахватаОбъектовПоФайлуИсторииХранилища
//		CreateFileForRepositoryLock - СоздатьФайлДляЗахватаОбъектов
//	SQL:
//		SQLBackup[Full|Differential|Log][CopyOnly] - SQLРезервнаяКопия[Full|Differential|Log][CopyOnly]
//		SQLRestore - SQLВосстановитьИзРезервнойКопии
//  GIT:
//		GitPull - ОбновитьИзГитРепозитория		
//	

// ********************************************************************************************
// ПОДКЛЮЧАЕМЫЕ БИБЛИОТЕКИ

#Использовать TLog
#Использовать TRun1C
#Использовать TMSSQL
#Использовать TMail
#Использовать json

// ПЕРЕМЕННЫЕ
Перем Логирование;
Перем КаталогСценария;

// ********************************************************************************************
Процедура Инициализация()

	////////////////////////////////////////
	// Установим глобальные перменные
	УправлениеЭП = Новый ТУправлениеЭлектроннойПочтой();
	
	РежимОтладки = Ложь;
	РежимТестирования = Ложь;
	РежимЗадания = Ложь;
	ИдентификаторЗадания = "TDeploy1C";
	КаталогХраненияЛогов = "";
	КаталогСценария = ТекущийСценарий().Каталог;

	#Область ЧтениеПараметровКоманднойСтроки

	МассивФайловНастроек = Новый Массив;
	МассивФайловСценариев = Новый Массив;
	МассивИБДляОбновления = Новый Массив;
	МассивСкриптов = Новый Массив;
	Для Сч = 0 По АргументыКоманднойСтроки.Количество() - 1 Цикл
		Аргумент = Нрег(СокрЛП(АргументыКоманднойСтроки.Получить(Сч)));
		Если Лев(Аргумент, 1) = "-" Тогда
			// Специальные параметры
			Если Аргумент = "-path" Тогда
				Сч = Сч + 1;
				КаталогСценария = СокрЛП(АргументыКоманднойСтроки.Получить(Сч));
			ИначеЕсли Аргумент = "-settings" Тогда
				Сч = Сч + 1;
				ПараметрИсточник = СокрЛП(АргументыКоманднойСтроки.Получить(Сч));
				МассивФайловНастроек = СтрРазделить(ПараметрИсточник, ";");
			ИначеЕсли Аргумент = "-ib" Тогда
				Сч = Сч + 1;
				ПараметрИсточник = СокрЛП(АргументыКоманднойСтроки.Получить(Сч));
				МассивИБДляОбновления = СтрРазделить(ПараметрИсточник, ";");
			ИначеЕсли Аргумент = "-script" Тогда
				Сч = Сч + 1;
				ПараметрИсточник = СокрЛП(АргументыКоманднойСтроки.Получить(Сч));
				МассивСкриптов = СтрРазделить(ПараметрИсточник, ";");
			ИначеЕсли Аргумент = "-scripts" Тогда
				Сч = Сч + 1;
				ПараметрИсточник = СокрЛП(АргументыКоманднойСтроки.Получить(Сч));
				МассивФайловСценариев = СтрРазделить(ПараметрИсточник, ";");	
			ИначеЕсли Аргумент = "-logs" Тогда
				Сч = Сч + 1;
				КаталогХраненияЛогов = СокрЛП(АргументыКоманднойСтроки.Получить(Сч));
			ИначеЕсли Аргумент = "-task" Тогда
				РежимЗадания = Истина;
				Сообщить("--------------------------------------------");
				Сообщить("ЗАПУСК В РЕЖИМЕ ВЫПОЛЕНИЯ ЗАДАНИЯ");
				Сообщить("--------------------------------------------");
				Сч = Сч + 1;
				ИдентификаторЗадания = СокрЛП(АргументыКоманднойСтроки.Получить(Сч));			
			ИначеЕсли Аргумент = "-debug" Тогда
				РежимОтладки = Истина;
				Сообщить("--------------------------------------------");
				Сообщить("ЗАПУСК В РЕЖИМЕ ОТЛАДКИ");
				Сообщить("--------------------------------------------");
			ИначеЕсли Аргумент = "-testsettings" Тогда
				РежимТестирования = Истина;
				Сообщить("--------------------------------------------");
				Сообщить("ЗАПУСК В РЕЖИМЕ ТЕСТИРОВАНИЯ НАСТРОЕК");
				Сообщить("--------------------------------------------");
			Иначе
				Сообщить("Неизвестный параметр: " + Аргумент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	#КонецОбласти

	#Область НастройкиЛогирования

	Если КаталогХраненияЛогов = "" Тогда	
		КаталогХраненияЛогов = ОбъединитьПути(КаталогСценария, "_Logs\");
	КонецЕсли;
	Логирование = Новый ТУправлениеЛогированием(); // TLog
	Логирование.ДатаВремяВКаждойСтроке = Истина;
	Логирование.ВыводитьСообщенияПриЗаписи = Истина;	
	Логирование.СоздатьФайлЛога(ИдентификаторЗадания, КаталогХраненияЛогов);

	#КонецОбласти

	#Область СозданиеКонфигурационныхФайлов

	// Если файл с настройками не был передан в параметрах, найдем его в каталоге
	ЗавершитьРаботу = 0;
	Если МассивФайловНастроек.Количество() = 0 Тогда
		// Попробуем найти файл настроек в текущем каталоге
		МассивФайлов = НайтиФайлы(КаталогСценария, "TDeploy1C_Settings*.json");
		Если МассивФайлов.Количество() = 0 Тогда
			Если СоздатьШаблонФайлаНастроек(ОбъединитьПути(КаталогСценария, "TDeploy1C_Settings.json")) Тогда
				Сообщить("Создан шаблон файла настроек. Заполните файл и перезапустите программу.");
				ЗавершитьРаботу = 1;
			Иначе
				ЗавершитьРаботу = 2;
			КонецЕсли;
		Иначе
			Для Каждого Файл Из МассивФайлов Цикл
				МассивФайловНастроек.Добавить(Файл.ПолноеИмя);
			КонецЦикла
		КонецЕсли;		
	КонецЕсли;

	// Если файл с скриптами не был передан в параметрах, найдем его в каталоге
	Если МассивСкриптов.Количество() = 0
		И МассивФайловСценариев.Количество() = 0 Тогда
		// Попробуем найти файл сценариев в текущем каталоге
		ПутьКФайлу = ОбъединитьПути(КаталогСценария, "TDeploy1C_Scripts.json");
		Файл = Новый Файл(ПутьКФайлу);
		Если Не файл.Существует() Тогда
			Если СоздатьШаблонФайлаСкриптов(ПутьКФайлу) Тогда
				Сообщить("Создан шаблон файла скриптов. Заполните файл и перезапустите программу.");
				ЗавершитьРаботу = 1;
			Иначе
				ЗавершитьРаботу = 2;
			КонецЕсли;
		КонецЕсли;
		МассивФайловСценариев.Добавить(ПутьКФайлу);
	КонецЕсли;

	Если ЗавершитьРаботу = 1 Тогда
		ЗавершитьРаботуСПаузой();
	ИначеЕсли ЗавершитьРаботу = 2 Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;

	#КонецОбласти

	#Область ФормированиеТаблицыНастроек

	// Заполняем список обновляемых баз
	ТаблицаБазДанных = Новый ТаблицаЗначений;

	ТаблицаБазДанных.Колонки.Добавить("Имя");
	ТаблицаБазДанных.Колонки.Добавить("Синоним");
	ТаблицаБазДанных.Колонки.Добавить("ПутьКПлатформе1С");
	ТаблицаБазДанных.Колонки.Добавить("ТипБазы");

	ТаблицаБазДанных.Колонки.Добавить("ВерсияCOMConnector");
	ТаблицаБазДанных.Колонки.Добавить("ИмяБазы");
	ТаблицаБазДанных.Колонки.Добавить("АдресКластера");
	ТаблицаБазДанных.Колонки.Добавить("ПортКластера");
	ТаблицаБазДанных.Колонки.Добавить("ПортАгента");
	ТаблицаБазДанных.Колонки.Добавить("АдресСервераАдминистрирования");
	ТаблицаБазДанных.Колонки.Добавить("СообщениеПриБлокировке");
	ТаблицаБазДанных.Колонки.Добавить("МинутОжиданияЗавершенияСеансов");
	ТаблицаБазДанных.Колонки.Добавить("ИмяПользователяАдминистратораКластера");
	ТаблицаБазДанных.Колонки.Добавить("ПарольПользователяАдминистратораКластера");

	ТаблицаБазДанных.Колонки.Добавить("ИмяПользователя");
	ТаблицаБазДанных.Колонки.Добавить("ПарольПользователя");

	ТаблицаБазДанных.Колонки.Добавить("АдресХранилища");
	ТаблицаБазДанных.Колонки.Добавить("ИмяПользователяХранилища");
	ТаблицаБазДанных.Колонки.Добавить("ПарольПользователяХранилища");
	ТаблицаБазДанных.Колонки.Добавить("КомментарийВХранилище");
	
	ТаблицаБазДанных.Колонки.Добавить("РабочийКаталог");
	ТаблицаБазДанных.Колонки.Добавить("ПутьКОбработке");
	ТаблицаБазДанных.Колонки.Добавить("ПараметрыЗапуска");
	ТаблицаБазДанных.Колонки.Добавить("ИмяРасширения");
	ТаблицаБазДанных.Колонки.Добавить("ПутьКРасширению");
	ТаблицаБазДанных.Колонки.Добавить("ПутьКПриложению");
	Для Сч = 1 По 5 Цикл
		ТаблицаБазДанных.Колонки.Добавить("ПутьКОбработке" + Сч);
		ТаблицаБазДанных.Колонки.Добавить("ПараметрыЗапуска" + Сч);
		ТаблицаБазДанных.Колонки.Добавить("ИмяРасширения" + Сч);
		ТаблицаБазДанных.Колонки.Добавить("ПутьКРасширению" + Сч);
		ТаблицаБазДанных.Колонки.Добавить("ПутьКПриложению" + Сч);
	КонецЦикла;

	ТаблицаБазДанных.Колонки.Добавить("АдресСервераSQL");
	ТаблицаБазДанных.Колонки.Добавить("ИмяПользователяSQL");
	ТаблицаБазДанных.Колонки.Добавить("ПарольПользователяSQL");
	ТаблицаБазДанных.Колонки.Добавить("ИмяБазыДанныхSQL");

	ТаблицаБазДанных.Колонки.Добавить("AllureПутьКИсполняемомуФайлу");
	ТаблицаБазДанных.Колонки.Добавить("AllureКаталогИсточник");
	ТаблицаБазДанных.Колонки.Добавить("AllureКаталогОтчетов");

	ТаблицаБазДанных.Колонки.Добавить("GitПутьКИсполняемомуФайлу");
	ТаблицаБазДанных.Колонки.Добавить("GitЛокальныйРепозиторий");
	ТаблицаБазДанных.Колонки.Добавить("GitУдаленныйРепозиторий");
	ТаблицаБазДанных.Колонки.Добавить("GitИмяВетки");

	// Обработаем файлы настроек
	Сч = 0;
	Пока Истина Цикл

		Если Сч = МассивФайловНастроек.Количество() Тогда
			Прервать;
		КонецЕсли;

		ПутьКФайлу = МассивФайловНастроек.Получить(Сч);
		Файл = Новый Файл(ПутьКФайлу);
		Если файл.Существует() Тогда

			// Сформируем таблицы
			ТаблицаОбщихНастроек = ТаблицаБазДанных.Скопировать();
			ТаблицаТекущихНастроек = ТаблицаБазДанных.Скопировать();
			
			// Получим текст файла
			ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
			ТекстФайла = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			Сообщить("Прочитан файл настроек: " + Файл.ПолноеИмя);

			Попытка
				ЧтениеJSON = Новый ПарсерJSON;
				ПараметрыИзФайла = ЧтениеJSON.ПрочитатьJSON(ТекстФайла, , , Истина);
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("общие", ТаблицаОбщихНастроек);
				СтруктураДанных.Вставить("списокиб", ТаблицаТекущихНастроек);
				СтруктураДанных.Вставить("настройкиsmtp", УправлениеЭП.УчетнаяЗаписьЭП);
				СтруктураДанных.Вставить("получателисообщений", УправлениеЭП.СтруктураСообщения);
				ПрочитатьПараметрыРекурсивно(ПараметрыИзФайла, СтруктураДанных);
			Исключение
				Сообщить(ОписаниеОшибки());
				ЗавершитьРаботу(1);
			КонецПопытки;

			// Сформируем итоговую таблицу настроек
			Для Каждого СтрокаТекущихНастроек Из ТаблицаТекущихНастроек Цикл
				СтрокаБД = ТаблицаБазДанных.Добавить();
				Для Каждого Колонка Из ТаблицаТекущихНастроек.Колонки Цикл
					
					ИмяКолонки = Колонка.Имя;
					Значение = СтрокаТекущихНастроек[ИмяКолонки];

					// Заполним из общих настроек
					Если Не ЗначениеЗаполнено(Значение) Тогда
						
						Для Каждого СтрокаОбщихНастроек Из ТаблицаОбщихНастроек Цикл
							Значение = СтрокаОбщихНастроек[ИмяКолонки];
						КонецЦикла;

						Если ИмяКолонки = "Синоним" Тогда
							Значение = СтрокаТекущихНастроек.Имя;
						КонецЕсли;
						Если ИмяКолонки = "ИмяБазы" Тогда
							Значение = СтрокаТекущихНастроек.Имя;
						КонецЕсли;
						Если ИмяКолонки = "ИмяБазыДанныхSQL" Тогда
							Значение = СтрокаТекущихНастроек.Имя;
						КонецЕсли;

					КонецЕсли;
					
					// Обработаем специальные параметры
					Если НРег(Значение) = "&пустоезначение" ИЛИ НРег(Значение) = "&emptyvalue" Тогда
						Значение = "";
					КонецЕсли;

					СтрокаБД[ИмяКолонки] = Значение;

				КонецЦикла;

			КонецЦикла;

			Сч = Сч + 1;			
		Иначе
			Сообщить("Не найден файл настроек по пути: " + ПутьКФайлу);
			МассивФайловНастроек.Удалить(Сч);
		КонецЕсли;				

	КонецЦикла;

	// Проверим, все ли заполнено
	Если ТаблицаБазДанных.Количество() = 0 Тогда
		Логирование.ЗаписатьСтрокуЛога("Не найдены ИБ для выполнения сценария!");
		Возврат;
	КонецЕсли;

	#КонецОбласти

	#Область ФормированиеТаблицыСценариев

	ТаблицаСценариев = Новый ТаблицаЗначений;
	ТаблицаСценариев.Колонки.Добавить("СписокИБ");
	ТаблицаСценариев.Колонки.Добавить("Сценарий");

	// Обработаем файлы сценариев
	Сч = 0;
	Пока Истина Цикл

		Если Сч = МассивФайловСценариев.Количество() Тогда
			Прервать;
		КонецЕсли;

		ПутьКФайлу = МассивФайловСценариев.Получить(Сч);
		Файл = Новый Файл(ПутьКФайлу);
		Если Не Файл.Существует() Тогда
			Сообщить("Не найден файл сценария по пути: " + ПутьКФайлу);
			ПутьКФайлу = ОбъединитьПути(КаталогСценария, ПутьКФайлу);
		КонецЕсли;

		Файл = Новый Файл(ПутьКФайлу);
		Если Файл.Существует() Тогда

			// Получим текст файла
			ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
			ТекстФайла = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			Сообщить("Прочитан файл сценария: " + Файл.ПолноеИмя);

			Попытка
				ЧтениеJSON = Новый ПарсерJSON;
				ПараметрыИзФайла = ЧтениеJSON.ПрочитатьJSON(ТекстФайла, , , Истина);
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("сценарии", ТаблицаСценариев);
				ПрочитатьПараметрыРекурсивно(ПараметрыИзФайла, СтруктураДанных);
			Исключение
				Сообщить(ОписаниеОшибки());
				ЗавершитьРаботу(1);
			КонецПопытки;

			Сч = Сч + 1;			
		Иначе
			Сообщить("Не найден файл сценария по пути: " + ПутьКФайлу);
			МассивФайловСценариев.Удалить(Сч);
		КонецЕсли;		

	КонецЦикла;

	// Добавим базы и параметры запуска из строки запуска
	Если МассивСкриптов.Количество() > 0 Тогда
		СтрокаСценария = ТаблицаСценариев.Добавить();
		СтрокаСценария.СписокИБ = Новый Массив;
		СтрокаСценария.Сценарий = МассивСкриптов;
	КонецЕсли;
	Если МассивИБДляОбновления.Количество() > 0 Тогда
		Для Каждого СтрокаСценария Из ТаблицаСценариев Цикл
			Если СтрокаСценария.СписокИБ.Количество() = 0 Тогда
				СтрокаСценария.СписокИБ = МассивИБДляОбновления;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Проверим, все ли заполнено
	Если ТаблицаСценариев.Количество() = 0  Тогда
		Логирование.ЗаписатьСтрокуЛога("Не найдены сценарии для выполнения!");
		Возврат;
	КонецЕсли;

	#КонецОбласти

	#Область ВыполнениеСценариев

	////////////////////////////////////////
	// Если режим тестирования - завершить работу

	Сообщить("--------------------------------------------");
	Если РежимТестирования Тогда
		// Тестирование
		БылиОшибки = ВыполнитьТестНастроек(ТаблицаБазДанных);
	Иначе

		// Выведем итоговые настройки для режима отладки
		Если РежимОтладки Тогда
			Сообщить("Прочитаны настройки:");
			Для Каждого СтрокаБД Из ТаблицаБазДанных Цикл
				Сообщить("ИБ : " + СтрокаБД.Имя);
				Для Каждого Колонка Из ТаблицаБазДанных.Колонки Цикл
					ИмяКолонки = Колонка.Имя;
					Сообщить("  " + ИмяКолонки + " : " + СтрокаБД[ИмяКолонки]);
				КонецЦикла;
			КонецЦикла;
			Сообщить("Выполняются сценарии:");
			Для Каждого СтрокаСценария Из ТаблицаСценариев Цикл
				Сообщить("Сценарий № : " + (ТаблицаСценариев.Индекс(СтрокаСценария) + 1));
				Сообщить("  Список ИБ : ");
				Для Каждого ТекЭлемент Из СтрокаСценария.СписокИБ Цикл
					Сообщить("    - " + ТекЭлемент);
				КонецЦикла;
				Сообщить("  Сценарий : ");
				Для Каждого ТекЭлемент Из СтрокаСценария.Сценарий Цикл
					Сообщить("    - " + ТекЭлемент);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;

		// Заполним скрипты в Таблице Информационных баз
		БылиОшибки = ВыполнитьОперацииПоСписку(
			ТаблицаБазДанных, 
			ТаблицаСценариев, 
			РежимЗадания, 
			ИдентификаторЗадания, 
			РежимОтладки);

		Если РежимЗадания Тогда
			// Отправляем эклектронное сообщение с файлом лога во вложении
			ОтправитьУведомлениеОператору(УправлениеЭП, БылиОшибки, ИдентификаторЗадания);
		Иначе
			// Ожидаем ответа администратора
			ЗавершитьРаботуСПаузой();
		КонецЕсли;

	КонецЕсли;

	#КонецОбласти
	
КонецПроцедуры

// ********************************************************************************************
Процедура ПрочитатьПараметрыРекурсивно(Параметры, Данные, СтруктураЗначений = "")

	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
	
		Для Каждого Параметр Из Параметры Цикл

			Ключ = НРег(СокрЛП(Параметр.Ключ));
			Значение = Параметр.Значение;
			
			Если ТипЗнч(Значение) = Тип("Структура")
				Или ТипЗнч(Значение) = Тип("Соответствие") Тогда
				
				Если Данные.Свойство(Ключ) Тогда
					СтруктураЗначений = Данные[Ключ];
					Если ТипЗнч(СтруктураЗначений) = Тип("ТаблицаЗначений")
						Или ТипЗнч(СтруктураЗначений) = Тип("СписокЗначений") Тогда
						СтруктураЗначений = СтруктураЗначений.Добавить();
					КонецЕсли;
				КонецЕсли;
				ПрочитатьПараметрыРекурсивно(Значение, Данные, СтруктураЗначений);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
				
				Для Каждого ЭлементМассива Из Значение Цикл
					Если Данные.Свойство(Ключ) Тогда
						СтруктураЗначений = Данные[Ключ];
						Если ТипЗнч(СтруктураЗначений) = Тип("ТаблицаЗначений")
							Или ТипЗнч(СтруктураЗначений) = Тип("СписокЗначений") Тогда
							СтруктураЗначений = СтруктураЗначений.Добавить();
						КонецЕсли;
						Если Ключ = "сценарии" Тогда
							СтруктураЗначений.СписокИБ = Новый Массив;
							Данные.Вставить("списокиб", СтруктураЗначений.СписокИБ);
							СтруктураЗначений.Сценарий = Новый Массив;
							Данные.Вставить("сценарий", СтруктураЗначений.Сценарий);
						КонецЕсли;
					КонецЕсли;
					ПрочитатьПараметрыРекурсивно(ЭлементМассива, Данные, СтруктураЗначений);
				КонецЦикла;
				
			Иначе
				Если СтруктураЗначений = "" Тогда
					Сообщить("Неверные параметры файла");
				ИначеЕсли ТипЗнч(СтруктураЗначений) = Тип("Массив") Тогда
					СтруктураЗначений.Добавить(Параметр.Значение);
				Иначе
					СтруктураЗначений[Параметр.Ключ] = Параметр.Значение;
				КонецЕсли;						
			КонецЕсли;
			
		КонецЦикла;

	Иначе
		Если СтруктураЗначений = "" Тогда
			Сообщить("Неверные параметры файла");
		ИначеЕсли ТипЗнч(СтруктураЗначений) = Тип("Массив") Тогда
			СтруктураЗначений.Добавить(Параметры);
		Иначе
			СтруктураЗначений[Параметр.Ключ] = Параметры;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ********************************************************************************************
Функция СоздатьШаблонФайлаНастроек(ПУтьКФайлу)

	Попытка
		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ПУтьКФайлу, КодировкаТекста.UTF8);
		ЗаписьТекста.ЗаписатьСтроку("
		|	{
		|		""Общие"":
		|		{
		|			""ПутьКПлатформе1С"" :							""C:\\Program Files\\1cv8\\8.3.X.XXXX\\bin\\1cv8.exe"",
		|			""ТипБазы"" :										""S"",
		|			""ВерсияCOMConnector"" :							""83"",
		|			""АдресКластера"" :								"""",
		|			""ПортКластера"" :								""1541"",
		|			""ПортАгента"" :									""1540"",
		|			""АдресСервераАдминистрирования""					""localhost:1545""
		|			""СообщениеПриБлокировке"" :						""Информационная база заблокирована для обновления"",
		|			""МинутОжиданияЗавершенияСеансов"" :				""2"",
		|			""ИмяПользователяАдминистратораКластера"" :		"""",
		|			""ПарольПользователяАдминистратораКластера"" :	"""",		
		|			""РабочийКаталог"" :								"""",
		|			""ПутьКОбработке"" :								"""",
		|			""ИмяРасширения"" :									"""",
		|			""ПутьКРасширению"" :								"""",
		|			""АдресСервераSQL"" :								"""",
		|			""ИмяПользователяSQL"" :							"""",
		|			""ПарольПользователяSQL"" :							"""",	
		|		},
		|		""СписокИБ"":
		|		[
		|			{
		|				""Имя"" :											""Base_Name"",
		|				""Синоним"" :										""Base Name"",
		|				""ИмяБазы"" :										""Base_Name"",		
		|				""ИмяПользователя"" :								"""",
		|				""ПарольПользователя"" :							"""",
		|				""АдресХранилища"" :								"""",
		|				""ИмяПользователяХранилища"" :					"""",
		|				""ПарольПользователяХранилища"" :					"""",
		|				""КомментарийВХранилище"" :							"""",
		|				""ИмяБазыДанныхSQL"" :								""""
		|			}
		|		],
		|		""ЭлектроннаяПочта"": 
		|		{
		|			""НастройкиSMTP"":
		|			{
		|				""АдресSMTP"" :						""smtp.ya.ru"",
		|				""ПортSMTP"" :						465,
		|				""ПользовательSMTP"" :				""ВашаПочта@yandex.ru"",
		|				""ПарольSMTP"" :						""ВашПароль"",
		|				""ИспользоватьSSL"" :					true
		|			},
		|			""ПолучателиСообщений"":
		|			{
		|				""АдресЭлектроннойПочтыПолучателя"" :	""ВашаПочта1@fto.com.ru; ВашаПочта2@fto.com.ru""
		|			}
		|		}
		|	}
		|");	
		ЗаписьТекста.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// ********************************************************************************************
Функция СоздатьШаблонФайлаСкриптов(ПУтьКФайлу)

	Попытка
		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ПУтьКФайлу, КодировкаТекста.UTF8);
		ЗаписьТекста.ЗаписатьСтроку("
		|{
		|	""Сценарии"": 
		|	[
		|		{
		|			""СписокИБ"" :
		|			[
		|				""Base_Name1"",
		|				""Base_Name2""
		|			],
		|			""Сценарий"":
		|			[
		|				""ПолучитьСписокСеансов"",
		|				""УстановитьБлокировкуНачалаСеансов"",
		|				""Ждать"",
		|				""ЗавершитьВсеСеансы"",
		|				""ОбновитьКонфигурациюИзХранилища"",
		|				""ОбновитьКонфигурациюБазыДанных"",
		|				""ПроверитьИзмененияОсновнойКонфигурации"",
		|				""СнятьБлокировкуНачалаСеансов"",
		|				""УдалитьФайлыКонфигураций"",
		|				""СохранитьКонфигурациюВФайл""					
		|			]
		|		},
		|		{
		|			""СписокИБ"":
		|			[
		|				""Base_Name1""
		|			],
		|			""Сценарий"":
		|			[
		|				""ЗапуститьПредприятиеСОбработкой""
		|			]
		|		}	
		|	]
		|}
		|");	
		ЗаписьТекста.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// ********************************************************************************************
Функция ВыполнитьТестНастроек(ТаблицаБазДанныхИтог)

	Запуск1С = Новый ТУправлениеЗапуском1С();
	БылиОшибки = Ложь;
	ЕстьДоступККонсолиКластера = Ложь;
	
	// Начало выполнения обработки
	Логирование.ЗаписатьСтрокуЛога("Начало выполнения тестирования настроек");

	// Цикл по всем базам
	Для Каждого СтрокаОбновления Из ТаблицаБазДанныхИтог Цикл

		БылиОшибкиТекБД = Ложь;
		Логирование.ЗаписатьСтрокуЛога("-------------------------------------------------------");
		Логирование.ЗаписатьСтрокуЛога("Тест информационной базы: """ + СтрокаОбновления.Имя + """", 1);
		
		// Параметры базы
		ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска, СтрокаОбновления);

		// Получим список активных соединений БД
		// Если список сеансов получен, считаем, что настройки базы заданы корректно
		Логирование.ЗаписатьСтрокуЛога("Получить список сеансов БД: ", 2);
		ТаблицаСеансов = Запуск1С.ПолучитьСписокСеансов();
		Если ТаблицаСеансов <> Неопределено Тогда
			Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, количество сеансов: " + ТаблицаСеансов.Количество(), 3);
			Для Каждого Сеанс ИЗ ТаблицаСеансов Цикл
				Логирование.ЗаписатьСтрокуЛога(Сеанс.Приложение + ", " + Сеанс.ИмяПользователя + ", " + Сеанс.ИмяКомпьютера, 5);
			КонецЦикла;
		Иначе
			Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
			БылиОшибкиТекБД = Истина;
		КонецЕсли;

		// Выполним очистку локального кэша хранилища конфигурации
		// Если получилось очистить, считаем, что настройки хранилища и настройки 1С:Предприятие заданы корректно
		Логирование.ЗаписатьСтрокуЛога("Очистить локальный кэш хранилища конфигурации: ", 2);
		Если НЕ БылиОшибкиТекБД И ЗначениеЗаполнено(Запуск1С.ПараметрыЗапуска.АдресХранилища) Тогда
			Если Запуск1С.ВыполнитьОчисткуЛокальногоКешаХранилища() Тогда
				Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
			Иначе
				Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
				БылиОшибкиТекБД = Истина;
			КонецЕсли;
		КонецЕсли;

		Логирование.ЗаписатьСтрокуЛога("Тест информационной базы " + СтрокаОбновления.Имя 
			+ " выполнен: " + ?(БылиОшибкиТекБД, "С ОШИБКАМИ!", "УСПЕШНО!"), 1);
		Логирование.ЗаписатьСтрокуЛога("-------------------------------------------------------");
		БылиОшибки = БылиОшибки ИЛИ БылиОшибкиТекБД;

	КонецЦикла;

	Логирование.ЗаписатьСтрокуЛога("Тестирование настроек выполнено " + ?(БылиОшибкиТекБД, "С ОШИБКАМИ!", "УСПЕШНО!"));

	Возврат БылиОшибки;
	
КонецФункции

// ********************************************************************************************
Процедура ЗавершитьРаботуСПаузой()

	Сообщить("Для продолжения нажмите любую клавишу...");
	Консоль = Новый Консоль();
	
	ОбщееОжидание = 0;
	Пока Не Консоль.НажатаКлавиша Цикл
		Приостановить(100);
	КонецЦикла;
	ЗавершитьРаботу(1);

КонецПроцедуры

// ********************************************************************************************
Процедура ОтправитьУведомлениеОператору(УправлениеЭП, БылиОшибки, ИдентификаторЗадания)

	Если ЗначениеЗаполнено(УправлениеЭП.УчетнаяЗаписьЭП.АдресSMTP) Тогда

		Сообщить("--------------------------------------------");
		Логирование.УвеличитьУровень();

		СИ = Новый СистемнаяИнформация();
		СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
		Если БылиОшибки Тогда
			СтруктураСообщения.ТемаСообщения = "[" + ИдентификаторЗадания + " - ОШИБКА ВЫПОЛНЕНИЯ]";
			СтруктураСообщения.ТекстСообщения = "ВНИМАНИЕ! Задание """ + ИдентификаторЗадания 
				+ """ на сервере " + СИ.ИмяКомпьютера + " завершено с ошибками";
		Иначе
			СтруктураСообщения.ТемаСообщения = "[" + ИдентификаторЗадания + " - УСПЕШНОЕ ВЫПОЛНЕНИЕ]";
			СтруктураСообщения.ТекстСообщения = "Успешное выполнение задания """ + ИдентификаторЗадания 
				+ """ на сервере " + СИ.ИмяКомпьютера;
		КонецЕсли;

		// Часть имеющегося лога добавим в письмо
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		КопироватьФайл(Логирование.ИмяФайлаЛога, ИмяВременногоФайла);
		СтруктураСообщения.Вложения = ИмяВременногоФайла;
		
		// Отправим сообщение
		Логирование.ЗаписатьСтрокуЛога("Отправить электронное сообщение: ");
		Если УправлениеЭП.ОтправитьСообщение() Тогда
			Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО. Адреса: " + СтруктураСообщения.АдресЭлектроннойПочтыПолучателя, 1);
		Иначе
			Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + УправлениеЭП.ТекстОшибки, 1);
			БылиОшибки = Истина;
		КонецЕсли;
	
		УдалитьФайлы(ИмяВременногоФайла);
		Логирование.УменьшитьУровень();

	КонецЕсли;

КонецПроцедуры

// ********************************************************************************************
Функция ВыполнитьОперацииПоСписку(ТаблицаБазДанных, ТаблицаСценариев, РежимЗадания = Ложь, ИдентификаторЗадания = "", РежимОтладки = Ложь)

	Запуск1С = Новый ТУправлениеЗапуском1С();
	Запуск1С.РежимОтладки = РежимОтладки;
	РаботаСSQL = Новый УправлениеMSSQL();
	РаботаСSQL.РежимОтладки = РежимОтладки;
	БылиОшибки = Ложь;
	
	Логирование.ЗаписатьСтрокуЛога("Начало выполнения операций с информационными базами по списку");

	// Цикл по базам для обновления
	Для Каждого СтрокаСценария Из ТаблицаСценариев Цикл

		Для Каждого ТекущяИБ Из СтрокаСценария.СписокИБ Цикл

			СтрокаОбновления = ТаблицаБазДанных.Найти(ТекущяИБ,"Имя");
			Если СтрокаОбновления = Неопределено Тогда
				Логирование.ЗаписатьСтрокуЛога("В файле настроек не найдена ИБ с именем """ + ТекущяИБ + """ ...", 1);
				Продолжить;
			КонецЕсли;

			БылиОшибкиТекБД = Ложь;
			ПрекратитьВыполнениеСценария = Ложь;
			Логирование.ЗаписатьСтрокуЛога("-------------------------------------------------------");
			Логирование.ЗаписатьСтрокуЛога("Операции над ИБ """ + СтрокаОбновления.Имя + """ ...", 1);

			// Параметры базы
			ЗаполнитьЗначенияСвойств(Запуск1С.ПараметрыЗапуска, СтрокаОбновления);
			ЗаполнитьЗначенияСвойств(РаботаСSQL.ПараметрыПодключения, СтрокаОбновления);

			Для Каждого Скрипт Из СтрокаСценария.Сценарий Цикл

				Скрипт = НРег(СокрЛП(Скрипт));

				// Выпоняются всегда, даже если были ошибки

				#Область Общие 

				// Ждать - Подождем определенное количество минут
				Если Скрипт = НРег("Wait")
					Или Скрипт = НРег("Ждать") Тогда
					
					Логирование.ЗаписатьСтрокуЛога("Ожидание: " + СтрокаОбновления.МинутОжиданияЗавершенияСеансов + " мин.", 2);
					Приостановить(СтрокаОбновления.МинутОжиданияЗавершенияСеансов * 60000);

				КонецЕсли;

				// ЗапуститьПриложение - Запустить произвольное приложение
				Если Лев(Скрипт, 6) = НРег("RunApp")
					Или Лев(Скрипт, 19) = НРег("ЗапуститьПриложение") Тогда

					НомерПриложения = "";
					Для Сч = 1 По 5 Цикл
						Если Лев(Скрипт, 7) = НРег("RunApp" + Сч) 
							Или Лев(Скрипт, 20) = НРег("ЗапуститьПриложение" + Сч) Тогда
							НомерПриложения = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;

					ПутьКПриложению = СтрокаОбновления["ПутьКПриложению" + НомерПриложения];
					Логирование.ЗаписатьСтрокуЛога("Запускаем приложение: " + ПутьКПриложению, 2);
					Если ПустаяСтрока(ПутьКПриложению) Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не задан путь к приложению №" + НомерПриложения, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = КаталогСценария;
					КонецЕсли;

					Если СтрНайти(Скрипт, "NoWaitCompletion") > 0
						Или СтрНайти(Скрипт, "НеЖдатьЗавершения") > 0 Тогда
						ЖдатьЗавершения = Ложь;
					Иначе
						ЖдатьЗавершения = Истина;
					КонецЕсли;

					Если Не БылиОшибкиТекБД Тогда
						Попытка
							КодВозврата = 0;							
							ЗапуститьПриложение(ПутьКПриложению, РабочийКаталог, ЖдатьЗавершения, КодВозврата);
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						Исключение
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА, код возврата: " + КодВозврата, 3);
							БылиОшибкиТекБД = Истина;
						КонецПопытки;
					КонецЕсли;

				КонецЕсли;

				// ЗаписатьСтатусВФайл - Запись статуса в файл
				Если Скрипт = НРег("WriteStatusToFile")
					Или Скрипт = НРег("ЗаписатьСтатусВФайл") Тогда
					
					ИмяФайла = КаталогСценария + "\TDeploy_Status.txt";
					Логирование.ЗаписатьСтрокуЛога("Запишем статус """ + БылиОшибки + """ в файл: " + ИмяФайла, 2);
					
					Попытка
						ТекстовыйДокумент = Новый ТекстовыйДокумент();
						ТекстовыйДокумент.ДобавитьСтроку(?(БылиОшибки,"1","0"));
						ТекстовыйДокумент.Записать(ИмяФайла);
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Исключение
						ТекстОшибки = ОписаниеОшибки();
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА, причина: " + ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецПопытки;

				КонецЕсли; 

				#КонецОбласти

				#Область Сеансы

				// СнятьБлокировкуНачалаСеансов - Снимем блокировку начала сеансов
				Если (Скрипт = НРег("UnlockStartSessions")
					Или Скрипт = НРег("СнятьБлокировкуНачалаСеансов")) Тогда

					Логирование.ЗаписатьСтрокуЛога("Снять блокировку начала сеансов: ", 2);
					Если Запуск1С.СнятьБлокировкуНачалаСеансов(Ложь) Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;			

				Если БылиОшибкиТекБД
					Или ПрекратитьВыполнениеСценария Тогда
					БылиОшибки = Истина;
					Продолжить;
				КонецЕсли;			
				
				// ПолучитьСписокСеансов - Получим список активных соединений БД
				Если Скрипт = НРег("GetListOfSessions")
					Или Скрипт = НРег("ПолучитьСписокСеансов") Тогда
					
					Логирование.ЗаписатьСтрокуЛога("Получить список сеансов БД: ", 2);
					ТаблицаСеансов = Запуск1С.ПолучитьСписокСеансов();
					Если ТаблицаСеансов <> Неопределено Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, количество сеансов: " + ТаблицаСеансов.Количество(), 3);
						Для Каждого Сеанс Из ТаблицаСеансов Цикл
							Логирование.ЗаписатьСтрокуЛога(Сеанс.Приложение + ", " + Сеанс.ИмяПользователя + ", " + Сеанс.ИмяКомпьютера, 5);
						КонецЦикла;
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				// ЗавершитьВсеСеансы - Завершим все сеансы
				Если Скрипт = НРег("CloseAllSessions")
					Или Скрипт = НРег("ЗавершитьВсеСеансы") Тогда
					
					Логирование.ЗаписатьСтрокуЛога("Завершить работу пользователей: ",2);
					Если Запуск1С.ЗавершитьРаботуПользователей() Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО",3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки,3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				// УстановитьБлокировкуНачалаСеансов - Установим блокировку начала сеансов
				Если Скрипт = НРег("LockStartSession") 
					Или Скрипт = НРег("УстановитьБлокировкуНачалаСеансов") Тогда

					Логирование.ЗаписатьСтрокуЛога("Установить блокировку начала сеансов: ", 2);
					Если Запуск1С.УстановитьБлокировкуНачалаСеансов(Ложь, СтрокаОбновления.МинутОжиданияЗавершенияСеансов) Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				// УстановитьБлокировкуРегламентныхЗаданий - Установим блокировку регламентных заданий
				Если Скрипт = НРег("LockScheduledJobs") 
					Или Скрипт = НРег("УстановитьБлокировкуРегламентныхЗаданий") Тогда

					Логирование.ЗаписатьСтрокуЛога("Установить блокировку регламентных заданий: ", 2);
					Если Запуск1С.УстановитьБлокировкуРегламентныхЗаданий() Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				// СнятьБлокировкуРегламентныхЗаданий - Снимем блокировку регламентных заданий
				Если Скрипт = НРег("UnlockScheduledJobs") 
					Или Скрипт = НРег("СнятьБлокировкуРегламентныхЗаданий") Тогда

					Логирование.ЗаписатьСтрокуЛога("Снять блокировку регламентных заданий: ", 2);
					Если Запуск1С.СнятьБлокировкуРегламентныхЗаданий() Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				#КонецОбласти

				#Область Запуск1С

				// Запустим 1С:Предприятие
				Если Лев(Скрипт, 15) = НРег("StartEnterprise")
					Или Лев(Скрипт, 20) = НРег("ЗапуститьПредприятие") Тогда

					ПутьКОбработке = "";
					ДопПараметрыЗапуска = "";
					Если СтрНайти(Скрипт, НРег("WithProcessing"))
						Или СтрНайти(Скрипт, НРег("СОбработкой")) Тогда
						
						НомерОбработки = "";
						Для Сч = 1 По 5 Цикл
							Если СтрНайти(Скрипт, НРег("WithProcessing" + Сч))
								Или СтрНайти(Скрипт, НРег("СОбработкой" + Сч)) Тогда
								НомерОбработки = Сч;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						ПутьКОбработке = СтрокаОбновления["ПутьКОбработке" + НомерОбработки];
						Если Не ПустаяСтрока(СтрокаОбновления["ПараметрыЗапуска" + НомерОбработки]) Тогда
							ДопПараметрыЗапуска = " /C""" + Строка(СтрокаОбновления["ПараметрыЗапуска" + НомерОбработки]) + """ ";
						КонецЕсли;

						Логирование.ЗаписатьСтрокуЛога("Запуск 1С:Предприятие с обработкой: " + ПутьКОбработке, 2);
					Иначе						
						Логирование.ЗаписатьСтрокуЛога("Запуск 1С:Предприятие: ", 2);
					КонецЕсли;

					Если СтрНайти(Скрипт, НРег("ThinClient"))
						Или СтрНайти(Скрипт, НРег("ТонкийКлиент")) Тогда
						ТонкийКлиент = Истина;
					Иначе
						ТонкийКлиент = Ложь;
					КонецЕсли;
					
					Если СтрНайти(Скрипт, НРег("TestManager"))
						Или СтрНайти(Скрипт, НРег("МенеджерТестирования")) Тогда
						ДопПараметрыЗапуска = "/TestManager " + ДопПараметрыЗапуска;
					КонецЕсли;

					Если СтрНайти(Скрипт, НРег("ClearCache"))
						Или СтрНайти(Скрипт, НРег("ОчиститьКеш")) Тогда
						ДопПараметрыЗапуска = "/ClearCache " + ДопПараметрыЗапуска;
					КонецЕсли;

					Если СтрНайти(Скрипт, НРег("NoWaitCompletion"))
						Или СтрНайти(Скрипт, НРег("НеЖдатьЗавершения")) Тогда
						ОжидатьЗавершения = Ложь;
					Иначе
						ОжидатьЗавершения = Истина;
					КонецЕсли;
					
					Если Запуск1С.ЗапуститьПредприятие(ПутьКОбработке, ОжидатьЗавершения, ДопПараметрыЗапуска, ТонкийКлиент) Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				// Запустим Конфигуратор
				Если Лев(Скрипт, 13) = НРег("StartDesigner")
					Или Лев(Скрипт, 21) = НРег("ЗапуститьКонфигуратор") Тогда

					Логирование.ЗаписатьСтрокуЛога("Запуск Конфигуратора: ", 2);

					Если СтрНайти(Скрипт, НРег("NoWaitCompletion"))
						Или СтрНайти(Скрипт, НРег("НеЖдатьЗавершения")) Тогда
						ОжидатьЗавершения = Ложь;
					Иначе
						ОжидатьЗавершения = Истина;
					КонецЕсли;
					
					Если Запуск1С.ЗапуститьКонфигуратор(ОжидатьЗавершения) Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				#КонецОбласти

				#Область Конфигурация

				// ПроверитьИзмененияОсновнойКонфигурации - Сравнить основную конфигурацию с конфигурацией БД
				Если Скрипт = НРег("CheckChangesMainCfg")
					Или Скрипт = НРег("ПроверитьИзмененияОсновнойКонфигурации") Тогда

					Логирование.ЗаписатьСтрокуЛога("Сравнить конфигурацию базы данных с основной конфигурацией: ", 2);
					РезультатСравнения = Запуск1С.ЕстьИзмененияОсновнойКонфигурации();
					Если РезультатСравнения = Неопределено Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					ИначеЕсли РезультатСравнения Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Есть изменения в основной конфигурации!", 3);
						БылиОшибкиТекБД = Истина;
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					КонецЕсли;

				КонецЕсли;

				// ОбновитьКонфигурациюБазыДанных - Обновить конфигурацию базы данных
				Если Скрипт = НРег("UpdateDBCfg")
					Или Скрипт = НРег("ОбновитьКонфигурациюБазыДанных") Тогда

					Логирование.ЗаписатьСтрокуЛога("Обновить конфигурацию базы данных: ", 2);

					// Боремся с ошибками "Расположение базы данных изменилось" и т. д.
					БДОбновлена = Ложь;
				
					Если Запуск1С.ОбновитьКонфигурациюБазыДанных() Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						БДОбновлена = Истина;
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
					КонецЕсли;
					
					Если Не БДОбновлена Тогда
						Если РежимЗадания Тогда
							БылиОшибкиТекБД = Истина;
						Иначе
							// Нужно вмешательство пользователя, запустим конфигуратор
							Если Запуск1С.ЗапуститьКонфигуратор(Истина) Тогда
								Логирование.ЗаписатьСтрокуЛога("- ВРУЧНУЮ", 3);	
							Иначе
								Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
								БылиОшибкиТекБД = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;
						
				// СохранитьКонфигурацию - Выгрузим файл конфигурации
				Если Скрипт = НРег("DumpCfg")
					Или Скрипт = НРег("СохранитьКонфигурацию") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = "";
					КонецЕсли;

					Если РабочийКаталог <> "" Тогда

						// Попробуем создать каталог, если его нет
						Файл = Новый Файл(РабочийКаталог);
						Если Не Файл.Существует() Тогда
							Логирование.ЗаписатьСтрокуЛога("Создать каталог: """ + РабочийКаталог + """", 2);
							СоздатьКаталог(РабочийКаталог);
							Если Файл.Существует() Тогда
								Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО",3);
							Иначе
								Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не удалось создать каталог.", 3);
								БылиОшибкиТекБД = Истина;
							КонецЕсли;
						КонецЕсли;
				
						Если Не БылиОшибкиТекБД Тогда
							
							// Выгрузим конфигурацию
							ПолноеИмяФайла = ОбъединитьПути(РабочийКаталог,
								СокрЛП(СтрокаОбновления.Имя) + Формат(ТекущаяДата(), "ДФ=_yyyy_MM_dd_ЧЧ_мм_сс") + ".cf");
							Логирование.ЗаписатьСтрокуЛога("Выгружаем конфигурацию в файл: " + ПолноеИмяФайла, 2);
							Если Запуск1С.СохранитьКонфигурациюВФайл(ПолноеИмяФайла) Тогда
								Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО в " + ПолноеИмяФайла, 3);
							Иначе
								Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
								БылиОшибкиТекБД = Истина;
							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;			

				// ЗагрузитьКонфигурацию - Загрузить конфигурацию из файла
				Если Скрипт = НРег("LoadCfg")
					Или Скрипт = НРег("ЗагрузитьКонфигурацию") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = КаталогСценария;
					КонецЕсли;
					
					Логирование.ЗаписатьСтрокуЛога("Ищем файл конфигурации в каталоге: " 
						+ РабочийКаталог, 2);

					НайденныеФайлы = НайтиФайлы(РабочийКаталог, "*.cf");
					Если НайденныеФайлы.Количество() = 0 Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + РабочийКаталог 
							+ """ не найден файл с конфигурацией.", 3);
						БылиОшибкиТекБД = Истина;
					Иначе
						ТекФайл = НайденныеФайлы.Получить(0);
					КонецЕсли;

					Если Не БылиОшибкиТекБД Тогда
						Если ТекФайл.Существует() Тогда
							ПолныйПутьКФайлуКонфигурации = ТекФайл.ПолноеИмя;
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, найден файл: " + ПолныйПутьКФайлуКонфигурации, 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ТекФайл.ПолноеИмя 
								+ """ не найден файл с конфигурацией.", 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;				

					Если Не БылиОшибкиТекБД Тогда
						Логирование.ЗаписатьСтрокуЛога("Загружаем конфигурацию из файла: " 
							+ ПолныйПутьКФайлуКонфигурации, 2);	
						Если Запуск1С.ЗагрузитьКонфигурациюИзФайла(ПолныйПутьКФайлуКонфигурации) Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;			

				КонецЕсли;

				// ЗагрузитьРасширение - Загрузить расширение из файла
				Если Лев(Скрипт, 13) = НРег("LoadExtension")
					Или Лев(Скрипт, 19) = НРег("ЗагрузитьРасширение") Тогда

					НомерРасширения = "";
					Для Сч = 1 По 5 Цикл
						Если Скрипт = НРег("LoadExtension" + Сч)
							Или Скрипт = НРег("ЗагрузитьРасширение" + Сч) Тогда
							НомерРасширения = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					ИмяРасширения = СтрокаОбновления["ИмяРасширения" + НомерРасширения];
					Если ПустаяСтрока(ИмяРасширения) Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не задан путь к расширению №" + НомерРасширения, 3);
						БылиОшибкиТекБД = Истина;
					Иначе
						ПутьКРасширению = СтрокаОбновления["ПутьКРасширению" + НомерРасширения];
						Если ПустаяСтрока(ПутьКРасширению) Тогда
							Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
								РабочийКаталог = СтрокаОбновления.РабочийКаталог;
							Иначе
								РабочийКаталог = КаталогСценария;
							КонецЕсли;
							ПутьКРасширению = ОбъединитьПути(РабочийКаталог, ИмяРасширения + ".cfe");
						КонецЕсли;
					КонецЕсли;					

					Если Не БылиОшибкиТекБД Тогда
						ТекФайл = Новый Файл(ПутьКРасширению);
						Если ТекФайл.Существует() Тогда
							ПолныйПутьКФайлуКонфигурации = ТекФайл.ПолноеИмя;
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, найден файл: " + ПолныйПутьКФайлуКонфигурации, 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ТекФайл.ПолноеИмя 
								+ """ не найден файл с расширением.", 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;				

					Если Не БылиОшибкиТекБД Тогда
						Логирование.ЗаписатьСтрокуЛога("Загружаем расширение из файла: " 
							+ ПолныйПутьКФайлуКонфигурации, 2);	
						Если Запуск1С.ЗагрузитьКонфигурациюИзФайла(ПолныйПутьКФайлуКонфигурации, ИмяРасширения) Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;			

				КонецЕсли;

				// ОбъединитьКонфигурацию - Выполним объединение конфигурации с файлом
				Если Скрипт = НРег("MergeCfg")
					Или Скрипт = НРег("ОбъединитьКонфигурацию") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = КаталогСценария;
					КонецЕсли;
				
					Логирование.ЗаписатьСтрокуЛога("Ищем файл конфигурации в каталоге: " 
						+ РабочийКаталог, 2);

					НайденныеФайлы = НайтиФайлы(РабочийКаталог, "*.cf");
					Если НайденныеФайлы.Количество() = 0 Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + РабочийКаталог 
							+ """ не найден файл с конфигурацией.", 3);
						БылиОшибкиТекБД = Истина;
					Иначе
						ТекФайл = НайденныеФайлы.Получить(0);
					КонецЕсли;

					Если Не БылиОшибкиТекБД Тогда
						Если ТекФайл.Существует() Тогда
							ПолныйПутьКФайлуКонфигурации = ТекФайл.ПолноеИмя;
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, найден файл: " + ПолныйПутьКФайлуКонфигурации, 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ТекФайл.ПолноеИмя 
								+ """ не найден файл с конфигурацией.", 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если Не БылиОшибкиТекБД Тогда

						Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
							ПутьДляФайловРаботыСХранилищем = СтрокаОбновления.РабочийКаталог;
						Иначе
							ПутьДляФайловРаботыСХранилищем = КаталогСценария;
						КонецЕсли;
						
						ПолныйПутьКФайлуНастроек = ОбъединитьПути(ПутьДляФайловРаботыСХранилищем, "MergeSettings.xml");

						Файл = Новый Файл(ПолныйПутьКФайлуНастроек);
						Если Не Файл.Существует() Тогда
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ПолныйПутьКФайлуНастроек 
								+ """ не найден файл с настройками объединения.", 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;

					КонецЕсли;

					Если Не БылиОшибкиТекБД Тогда
						Логирование.ЗаписатьСтрокуЛога("Выполняем объединение конфигуации с файлом: " 
							+ ПолныйПутьКФайлуКонфигурации, 2);	
						Если Запуск1С.ОбъединитьКонфигурациюСФайлом(ПолныйПутьКФайлуКонфигурации, ПолныйПутьКФайлуНастроек) Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;			

				КонецЕсли;
				
				#КонецОбласти

				#Область РаботаСХранилищем

				// ПроверитьИзмененияВХранилище - Проверим, есть ли изменения в хранилище
				Если Скрипт = НРег("CheckChangesInRepository") 
					Или Скрипт = НРег("ПроверитьИзмененияВХранилище") Тогда

					Логирование.ЗаписатьСтрокуЛога("Првоерить изменения в хранилище: ",2);
					ЕстьИзмененияВХранилище =  Запуск1С.ЕстьИзмененияВХранилище();
					Если ЕстьИзмененияВХранилище = Неопределено Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
					ИначеЕсли ЕстьИзмененияВХранилище Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, есть изменения ",3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, ИЗМЕНЕНИЙ НЕТ!", 3);
						ПрекратитьВыполнениеСценария = Истина;
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				// ОбновитьКонфигурациюИзХранилища - Обновим конфигурацию из хранилища
				Если Скрипт = НРег("ConfigurationRepositoryUpdateCfg") 
					Или Скрипт = НРег("ОбновитьКонфигурациюИзХранилища") Тогда

					Логирование.ЗаписатьСтрокуЛога("Обновить конфигурацию из хранилища: ", 2);
					Если Запуск1С.ОбновитьКонфигурациюИзХранилища() Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				// ЗахватитьОбъектыИзХранилища - Выполним захват объектов из хранилища
				Если Скрипт = НРег("ConfigurationRepositoryLock") 
					Или Скрипт = НРег("ЗахватитьОбъектыИзХранилища") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						ПутьДляФайловРаботыСХранилищем = СтрокаОбновления.РабочийКаталог;
					Иначе
						ПутьДляФайловРаботыСХранилищем = КаталогСценария;
					КонецЕсли;

					ПолныйПутьФайлаЗахвата = ОбъединитьПути(ПутьДляФайловРаботыСХранилищем, "RepositoryLock.xml");
					Файл = Новый Файл(ПолныйПутьФайлаЗахвата);
					Если Не Файл.Существует() Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ПолныйПутьФайлаЗахвата 
							+ """ не найден файл с историей хранилища.", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					Если Не БылиОшибкиТекБД Тогда
						Логирование.ЗаписатьСтрокуЛога("Выполняем захват объектов из хранилища: ", 2);				
						Если Запуск1С.ЗахватитьВХранилище(ПолныйПутьФайлаЗахвата) Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;			

				// ОтменитьЗахватОбъектовИзХранилища - Выполним отмену захвата объектов из хранилища
				Если Скрипт = НРег("ConfigurationRepositoryUnLock") 
					Или Скрипт = НРег("ОтменитьЗахватОбъектовИзХранилища") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						ПутьДляФайловРаботыСХранилищем = СтрокаОбновления.РабочийКаталог;
					Иначе
						ПутьДляФайловРаботыСХранилищем = КаталогСценария;
					КонецЕсли;

					ПолныйПутьФайла = ОбъединитьПути(ПутьДляФайловРаботыСХранилищем, "RepositoryLock.xml");
					Файл = Новый Файл(ПолныйПутьФайла);
					Если Не Файл.Существует() Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ПолныйПутьФайла 
							+ """ не найден файл с историей хранилища.", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					Если Не БылиОшибкиТекБД Тогда
						Логирование.ЗаписатьСтрокуЛога("Выполнить захват объектов из хранилища: ", 2);				
						Если Запуск1С.ОтменитьЗахватВХранилище(ПолныйПутьФайла) Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;			
				
				// ПоместитьОбъектыВХранилище - Выполним помещение объектов в хранилище
				Если Лев(Скрипт, 29) = НРег("ConfigurationRepositoryCommit") 
					Или Лев(Скрипт, 26) = НРег("ПоместитьОбъектыВХранилище") Тогда

					Если СтрНайти(Скрипт, "UnLock")
						Или СтрНайти(Скрипт, "ОтменитьЗахват") Тогда
						ОставлятьОбъектыЗахваченными = Ложь;
					Иначе
						ОставлятьОбъектыЗахваченными = Истина;
					КонецЕсли;

					Если ПустаяСтрока(СтрокаОбновления.КомментарийВХранилище) Тогда
						КомментарийВХранилище = ИдентификаторЗадания;
					Иначе
						КомментарийВХранилище = СтрокаОбновления.КомментарийВХранилище;
					КонецЕсли;

					Логирование.ЗаписатьСтрокуЛога("Выполнить помещение объектов в хранилище: ", 2);				
					Если Запуск1С.ПоместитьВХранилище( , КомментарийВХранилище, ОставлятьОбъектыЗахваченными) Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				// ПодключитьсяКХранилищу - Подключить конфигурацию к хранилищу
				Если Скрипт = НРег("ConfigurationRepositoryBindCfg") 
					Или Скрипт = НРег("ПодключитьсяКХранилищу") Тогда

					Логирование.ЗаписатьСтрокуЛога("Подключить конфигурацию к хранилищу: ", 2);				
					Если Запуск1С.ПодключитьКонфигурациюКХранилищу() Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;
				
				// ОтключитьсяОтХранилища - Отключить конфигурацию от хранилища
				Если Скрипт = НРег("ConfigurationRepositoryUnbindCfg") 
					Или Скрипт = НРег("ОтключитьсяОтХранилища") Тогда

					Логирование.ЗаписатьСтрокуЛога("Отключить конфигурацию от хранилища: ", 2);				
					Если Запуск1С.ОтключитьКонфигурациюОтХранилища() Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				// СохранитьКонфигурациюХранилища - Соханить конфигурацию хранилища в файл
				Если Скрипт = НРег("ConfigurationRepositoryDumpCfg")
					Или Скрипт = НРег("СохранитьКонфигурациюХранилища") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = "";
					КонецЕсли;

					Если РабочийКаталог <> "" Тогда

						// Попробуем создать каталог, если его нет
						Файл = Новый Файл(РабочийКаталог);
						Если Не Файл.Существует() Тогда
							Логирование.ЗаписатьСтрокуЛога("Создать каталог: """ + РабочийКаталог + """", 2);
							СоздатьКаталог(РабочийКаталог);
							Если Файл.Существует() Тогда
								Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО",3);
							Иначе
								Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не удалось создать каталог.", 3);
								БылиОшибкиТекБД = Истина;
							КонецЕсли;
						КонецЕсли;
				
						Если Не БылиОшибкиТекБД Тогда
							
							// Найдем имя хранилища
							Если НРег(Лев(СтрокаОбновления.АдресХранилища,3)) = "tcp"
								Или НРег(Лев(СтрокаОбновления.АдресХранилища,4)) = "http"
								Или НРег(Лев(СтрокаОбновления.АдресХранилища,5)) = "https" Тогда
								МассивЧастей = СтрРазделить(СтрокаОбновления.АдресХранилища,"/");
							Иначе
								МассивЧастей = СтрРазделить(СтрокаОбновления.АдресХранилища,"\");
							КонецЕсли;
							Если МассивЧастей.Количество() = 0 Тогда
								Логирование.ЗаписатьСтрокуЛога("- ОШИБКА разбора адреса хранлища", 3);
								БылиОшибкиТекБД = Истина;
							Иначе
								ИмяХранилища = МассивЧастей.Получить(МассивЧастей.Количество()-1);
								ПолноеИмяФайла = ОбъединитьПути(РабочийКаталог,
									СокрЛП(ИмяХранилища) + Формат(ТекущаяДата(), "ДФ=_yyyy_MM_dd_ЧЧ_мм_сс") + ".cf");
								Логирование.ЗаписатьСтрокуЛога("Выгружаем конфигурацию хранилища в файл: " + ПолноеИмяФайла, 2);
								Если Запуск1С.СохранитьКонфигурациюВФайл(ПолноеИмяФайла) Тогда
									Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО в " + ПолноеИмяФайла, 3);
								Иначе
									Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
									БылиОшибкиТекБД = Истина;
								КонецЕсли;

							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

				// ОтчетПоИсторииХранилища - Посторим отчет по истории хранилища
				Если Скрипт = НРег("ConfigurationRepositoryReport") 
					Или Скрипт = НРег("ОтчетПоИсторииХранилища") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						ПутьДляФайловРаботыСХранилищем = СтрокаОбновления.РабочийКаталог;
					Иначе
						ПутьДляФайловРаботыСХранилищем = КаталогСценария;
					КонецЕсли;

					ПолныйПутьФайла = ОбъединитьПути(ПутьДляФайловРаботыСХранилищем, "RepositoryLock.xml");
					Файл = Новый Файл(ПолныйПутьФайла);
					Если Не Файл.Существует() Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ПолныйПутьФайла 
							+ """ не найден файл с историей хранилища.", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;
					
					ПолныйПутьФайлаСВерсией = ОбъединитьПути(ПутьДляФайловРаботыСХранилищем, "RepositoryLastVersion.txt");

					Файл = Новый Файл(ПолныйПутьФайлаСВерсией);
					Если Файл.Существует() Тогда
						Логирование.ЗаписатьСтрокуЛога("Прочитать файл с последней версией хранилища: """ 
							+ ПолныйПутьФайлаСВерсией + """", 2);
						ЧтениеТекста = Новый ЧтениеТекста(ПолныйПутьФайлаСВерсией);
						ПоследняяВерсияХранилища = СокрЛП(ЧтениеТекста.ПрочитатьСтроку());
						ЧтениеТекста.Закрыть();
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, последняя версия: " + ПоследняяВерсияХранилища, 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ПолныйПутьФайлаСВерсией 
							+ """ не найден файл с последней версией хранилища.", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;				

					Если Не БылиОшибкиТекБД Тогда
						Логирование.ЗаписатьСтрокуЛога("Строим отчет по истории хранилища: ", 2);
						ПолныйПутьОтчета = ОбъединитьПути(ПутьДляФайловРаботыСХранилищем, "RepositoryReport.txt");
						Если Запуск1С.ПолучитьИсториюХранилища(ПолныйПутьОтчета, ПоследняяВерсияХранилища) Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

				#КонецОбласти

				#Область Файлы

				// УдалитьФайлы - Удаляем все старые файлы по маске
				Если Лев(Скрипт, 11) = НРег("DeleteFiles") 
					Или Лев(Скрипт, 12) = НРег("УдалитьФайлы") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = "";
					КонецЕсли;

					Если СтрНайти(Скрипт, "cf") > 0 Тогда
						МаскаФайлов = "*.cf";
					ИначеЕсли СтрНайти(Скрипт, "dt") > 0 Тогда
						МаскаФайлов = "*.dt";	
					ИначеЕсли СтрНайти(Скрипт, "bak") > 0 Тогда
						МаскаФайлов = "*.bak";
					ИначеЕсли СтрНайти(Скрипт, "trn") > 0 Тогда
						МаскаФайлов = "*.trn";
					Иначе
						МаскаФайлов = "*.cf";	
					КонецЕсли; 

					Если СтрНайти(Скрипт, НРег("СurrentBase")) > 0
						Или СтрНайти(Скрипт, НРег("ТекущейБазы")) > 0 Тогда					
						МаскаФайлов = СокрЛП(СтрокаОбновления.Имя) + МаскаФайлов;
					КонецЕсли;

					Если ЗначениеЗаполнено(РабочийКаталог) Тогда

						Логирование.ЗаписатьСтрокуЛога("Удалить файлы по маске: """ + МаскаФайлов
							+ " в каталоге " + РабочийКаталог, 2);
						УдалитьФайлы(РабочийКаталог, МаскаФайлов);
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);

					КонецЕсли;	

				КонецЕсли;

				// СоздатьФайлДляЗахватаОбъектовПоФайлуИсторииХранилища - По файлу истории хранилища 
				//	построим файл для захвата объектов
				Если Скрипт = НРег("CreateFileForRepositoryLockFromReport") 
					Или Скрипт = НРег("СоздатьФайлДляЗахватаОбъектовПоФайлуИсторииХранилища") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = КаталогСценария;
					КонецЕсли;

					ПолныйПутьОтчета = ОбъединитьПути(РабочийКаталог, "RepositoryReport.txt");
					Файл = Новый Файл(ПолныйПутьОтчета);
					Если Не Файл.Существует() Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ПолныйПутьОтчета 
							+ """ не найден файл с историей хранилища.", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					ПолныйПутьРазрешенныхОбъектов = ОбъединитьПути(РабочийКаталог, "RepositoryList.txt");
					Файл = Новый Файл(ПолныйПутьРазрешенныхОбъектов);
					Если Не Файл.Существует() Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ПолныйПутьРазрешенныхОбъектов 
							+ """ не найден файл с разрешенными объектами.", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;
					
					Если Не БылиОшибкиТекБД Тогда
						Логирование.ЗаписатьСтрокуЛога("Создаем файл для захвата объектов по истории хранилища: ", 2);
						ПолныйПутьКФайлуНеВошедшихОбъектов = ОбъединитьПути(РабочийКаталог, "RepositoryIgnoreList.txt");				
						ПолныйПутьФайлаЗахвата = ОбъединитьПути(РабочийКаталог, "RepositoryLock.xml");
						Если Запуск1С.СоздатьФайлДляЗахватаОбъектовИзФайлаИсторииХранилища(
							ПолныйПутьОтчета, ПолныйПутьФайлаЗахвата, ПолныйПутьРазрешенныхОбъектов, ПолныйПутьКФайлуНеВошедшихОбъектов) Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;			

				КонецЕсли;
		
				// СоздатьФайлДляЗахватаОбъектов - Построим файл для захвата объектов из списка объектов
				Если Скрипт = НРег("CreateFileForRepositoryLock") 
					Или Скрипт = НРег("СоздатьФайлДляЗахватаОбъектов") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = КаталогСценария;
					КонецЕсли;

					ПолныйПутьРазрешенныхОбъектов = ОбъединитьПути(РабочийКаталог, "RepositoryList.txt");
					Файл = Новый Файл(ПолныйПутьРазрешенныхОбъектов);
					Если Не Файл.Существует() Тогда
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + ПолныйПутьРазрешенныхОбъектов 
							+ """ не найден файл с разрешенными объектами.", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;
					
					Если Не БылиОшибкиТекБД Тогда
						Логирование.ЗаписатьСтрокуЛога("Создаем файл для захвата объектов по истории хранилища: ", 2);
						ПолныйПутьФайлаЗахвата = ОбъединитьПути(РабочийКаталог, "RepositoryLock.xml");
						Если Запуск1С.СоздатьФайлДляЗахватаОбъектов(ПолныйПутьРазрешенныхОбъектов, ПолныйПутьФайлаЗахвата) Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО создан файл: " + ПолныйПутьФайлаЗахвата, 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Запуск1С.ТекстОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;
					КонецЕсли;			

				КонецЕсли;
			
				#КонецОбласти
				
				#Область SQL

				// SQLРезервнаяКопия - Выгрузим файл конфигурации
				Если Лев(Скрипт, 9) = НРег("SQLBACKUP")
					Или Лев(Скрипт, 17) = НРег("SQLРезервнаяКопия") Тогда

					Если СтрНайти(Скрипт, "FULL") > 0 Тогда
						ТипКопии = "FULL";
					ИначеЕсли СтрНайти(Скрипт, "DIFFERENTIAL") > 0 Тогда
						ТипКопии = "DIFFERENTIAL";
					ИначеЕсли СтрНайти(Скрипт, "LOG") > 0 Тогда
						ТипКопии = "LOG";
					Иначе
						ТипКопии = "FULL";
					КонецЕсли;
					
					Если СтрНайти(Скрипт, "COPYONLY") > 0 Тогда
						ТолькоРезервноеКопирование = "COPY_ONLY";
					Иначе
						ТолькоРезервноеКопирование = "";
					КонецЕсли;

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = "";
					КонецЕсли;

					Если РабочийКаталог <> "" Тогда

						// Попробуем создать каталог, если его нет
						Файл = Новый Файл(РабочийКаталог);
						Если Не Файл.Существует() Тогда
							Логирование.ЗаписатьСтрокуЛога("Создать каталог: """ + РабочийКаталог + """", 2);
							СоздатьКаталог(РабочийКаталог);
							Если Файл.Существует() Тогда
								Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
							Иначе
								Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не удалось создать каталог.", 3);
								БылиОшибкиТекБД = Истина;
							КонецЕсли;
						КонецЕсли;
				
						Если Не БылиОшибкиТекБД Тогда
							
							Логирование.ЗаписатьСтрокуЛога("Создать резервную копию базы данных: ", 2);
							Результат = РаботаСSQL.СделатьРезервнуюКопиюБД(РабочийКаталог, , ТипКопии, ТолькоРезервноеКопирование);
							Если Результат <> Неопределено Тогда
								Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО в " + Результат, 3);
							Иначе
								Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + РаботаСSQL.ТекстОшибки, 3);
								БылиОшибкиТекБД = Истина;
							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

				// SQLВосстановитьИзРезервнойКопии - Загрузить конфигурацию из файла
				Если Скрипт = НРег("SQLRESTORE")
					Или Скрипт = НРег("SQLВосстановитьИзРезервнойКопии") Тогда

					Если ЗначениеЗаполнено(СтрокаОбновления.РабочийКаталог) Тогда
						РабочийКаталог = СтрокаОбновления.РабочийКаталог;
					Иначе
						РабочийКаталог = КаталогСценария;
					КонецЕсли;
					
					Логирование.ЗаписатьСтрокуЛога("Ищем файлы резервной копии SQL в каталоге: " 
						+ РабочийКаталог, 2);

					МассивФайлов = Новый Массив;

					НайденныеФайлы = НайтиФайлы(РабочийКаталог, "*.bak");
					Если НайденныеФайлы.Количество() > 0 Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, найдены файлы: ", 3);
						Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
							Логирование.ЗаписатьСтрокуЛога("- " + НайденныйФайл.Имя, 4);
							МассивФайлов.Добавить(НайденныйФайл.ПолноеИмя);
						КонецЦикла;	
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: По пути: """ + РабочийКаталог 
							+ """ не найдены файлы с резервными копиями SQL.", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					НайденныеФайлы = НайтиФайлы(РабочийКаталог, "*.trn");
					Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
						МассивФайлов.Добавить(НайденныйФайл.ПолноеИмя);
					КонецЦикла;
					
					Если Не БылиОшибкиТекБД Тогда

						Логирование.ЗаписатьСтрокуЛога("Восстановить базу данных: ", 2);
						Если РаботаСSQL.ВосстановитьИзРезервнойКопииБД(МассивФайлов)  Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО ", 3);							
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + РаботаСSQL.ТекстОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;

					КонецЕсли;			

				КонецЕсли;

				#КонецОбласти

				#Область Allure

				// AllureОчиститьКаталогИсточник - Удаляем все файлы из каталога-источника Allure
				Если Скрипт = НРег("AllureClearCatalogSource") 
					Или Скрипт = НРег("AllureОчиститьКаталогИсточник") Тогда

					Логирование.ЗаписатьСтрокуЛога("Удалить каталог-источник Allire: ", 2);
					AllureКаталогИсточник = СтрокаОбновления.AllureКаталогИсточник;

					Если ЗначениеЗаполнено(AllureКаталогИсточник) Тогда

						Попытка
							УдалитьФайлы(СтрокаОбновления.AllureКаталогИсточник);
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, удален каталог: " + AllureКаталогИсточник, 3);
						Исключение
							ОписаниеОшибки = ОписаниеОшибки();
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА:" + ОписаниеОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецПопытки;

					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не заполнен параметр ""AllureКаталогИсточник""", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;	

				КонецЕсли;

				// AllureСохранитьИсторию - перемещаем каталог history а каталог-источик Allure
				Если Скрипт = НРег("AllureSaveHistory") 
					Или Скрипт = НРег("AllureСохранитьИсторию") Тогда

					Логирование.ЗаписатьСтрокуЛога("Сохранить историю Allure:", 2);

					Если ЗначениеЗаполнено(СтрокаОбновления.AllureКаталогИсточник) Тогда
						AllureКаталогИсточник = СтрокаОбновления.AllureКаталогИсточник;
						Файл = Новый Файл(AllureКаталогИсточник);
						Если Не Файл.Существует() Тогда							
							Попытка
								СоздатьКаталог(AllureКаталогИсточник);
							Исключение
								ОписаниеОшибки = ОписаниеОшибки();
								Логирование.ЗаписатьСтрокуЛога("- ОШИБКА создания каталога: " + ОписаниеОшибки, 3);
								БылиОшибкиТекБД = Истина;
							КонецПопытки;
						КонецЕсли;
						AllureКаталогИсточникИстория = ОбъединитьПути(AllureКаталогИсточник, "history");
						Файл = Новый Файл(AllureКаталогИсточникИстория);
						Если Файл.Существует() Тогда
							Попытка
								УдалитьФайлы(AllureКаталогИсточникИстория);
							Исключение
								ОписаниеОшибки = ОписаниеОшибки();
								Логирование.ЗаписатьСтрокуЛога("- ОШИБКА удаления каталога: " + ОписаниеОшибки, 3);
								БылиОшибкиТекБД = Истина;
							КонецПопытки;
						КонецЕсли;
						Попытка
							СоздатьКаталог(AllureКаталогИсточникИстория);
						Исключение
							ОписаниеОшибки = ОписаниеОшибки();
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА создания каталога: " + ОписаниеОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецПопытки;
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не заполнен параметр ""AllureКаталогИсточник""", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					Если ЗначениеЗаполнено(СтрокаОбновления.AllureКаталогОтчетов) Тогда
						AllureКаталогОтчетов = ОбъединитьПути(СтрокаОбновления.AllureКаталогОтчетов, "history");
						МассивФайлов = НайтиФайлы(AllureКаталогОтчетов, ПолучитьМаскуВсеФайлы());
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не заполнен параметр ""AllureКаталогОтчетов""", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					Если Не БылиОшибкиТекБД Тогда
						
						Попытка
							Для Каждого ТекФайл Из МассивФайлов Цикл
								КопироватьФайл(
									ТекФайл.ПолноеИмя,
									ОбъединитьПути(AllureКаталогИсточникИстория, ТекФайл.Имя));
							КонецЦикла;	
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО, каталог " + AllureКаталогОтчетов 
								+ ", скопирован в: " + AllureКаталогИсточник, 3);					
						Исключение
							ОписаниеОшибки = ОписаниеОшибки();
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА копирования файла: " + ОписаниеОшибки, 3);
							БылиОшибкиТекБД = Истина;
						КонецПопытки;

					КонецЕсли;	

				КонецЕсли;
			
				// AllureСформироватьОтчеты - Формирование отчетов Allure
				Если Скрипт = НРег("AllureGenerateReports") 
					Или Скрипт = НРег("AllureСформироватьОтчеты") Тогда

					Логирование.ЗаписатьСтрокуЛога("Сформировать отчеты Allure:", 2);

					Если ЗначениеЗаполнено(СтрокаОбновления.AllureПутьКИсполняемомуФайлу) Тогда
						AllureПутьКИсполняемомуФайлу = СтрокаОбновления.AllureПутьКИсполняемомуФайлу;
						Если Прав(AllureПутьКИсполняемомуФайлу, 10) <> "allure.bat"
							И Прав(AllureПутьКИсполняемомуФайлу, 6) <> "allure" Тогда
							AllureПутьКИсполняемомуФайлу = ОбъединитьПути(AllureПутьКИсполняемомуФайлу, "allure.bat");
						КонецЕсли;
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не заполнен параметр ""AllureПутьКИсполняемомуФайлу""", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					Если ЗначениеЗаполнено(СтрокаОбновления.AllureКаталогИсточник) Тогда
						AllureКаталогИсточник = СтрокаОбновления.AllureКаталогИсточник;
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не заполнен параметр ""AllureКаталогИсточник""", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					Если ЗначениеЗаполнено(СтрокаОбновления.AllureКаталогОтчетов) Тогда
						AllureКаталогОтчетов = СтрокаОбновления.AllureКаталогОтчетов;
						МассивФайлов = НайтиФайлы(AllureКаталогОтчетов, ПолучитьМаскуВсеФайлы());
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: Не заполнен параметр ""AllureКаталогОтчетов""", 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

					Если Не БылиОшибкиТекБД Тогда

						Команда = Новый Команда;
						Команда.УстановитьКоманду(AllureПутьКИсполняемомуФайлу);
						Команда.ДобавитьПараметр("generate");
						Команда.ДобавитьПараметр("--clean """ + AllureКаталогИсточник + """");
						Команда.ДобавитьПараметр("--output """ + AllureКаталогОтчетов + """");
						КодВозврата = Команда.Исполнить();
						Вывод = Команда.ПолучитьВывод();

						Если КодВозврата = 0
							И Лев(Вывод, 29) = "Report successfully generated" Тогда
							Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
						Иначе
							Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Вывод, 3);
							БылиОшибкиТекБД = Истина;
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;	

				#КонецОбласти

				#Область Git

				// ОбновитьИзГитРепозитория - обновляем файлы из удаленного git-репозитория
				Если Скрипт = НРег("GitPull")
					Или Скрипт = НРег("ОбновитьИзГитРепозитория") Тогда

					Логирование.ЗаписатьСтрокуЛога("Обновляем файлы из GIT-репозитория: ", 2);

					Команда = Новый Команда;
					Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);
					Если ЗначениеЗаполнено(СтрокаОбновления.GitПутьКИсполняемомуФайлу) Тогда
						Команда.УстановитьКоманду(СтрокаОбновления.GitПутьКИсполняемомуФайлу);
					Иначе
						Команда.УстановитьКоманду("git");
					КонецЕсли;
					Команда.УстановитьРабочийКаталог(СтрокаОбновления.GitЛокальныйРепозиторий);					
					Команда.ДобавитьПараметр("pull");
					Команда.ДобавитьПараметр(СтрокаОбновления.GitУдаленныйРепозиторий);
					Если ЗначениеЗаполнено(СтрокаОбновления.GitИмяВетки) Тогда
						Команда.ДобавитьПараметр(СтрокаОбновления.GitИмяВетки);
					КонецЕсли;
					КодВозврата = Команда.Исполнить();
					Вывод = Команда.ПолучитьВывод();

					Если КодВозврата = 0 Тогда
						Логирование.ЗаписатьСтрокуЛога("- УСПЕШНО", 3);
					Иначе
						Логирование.ЗаписатьСтрокуЛога("- ОШИБКА: " + Вывод, 3);
						БылиОшибкиТекБД = Истина;
					КонецЕсли;

				КонецЕсли;

				#КонецОбласти

				БылиОшибки = БылиОшибки ИЛИ БылиОшибкиТекБД;

			КонецЦикла;	
			
			Логирование.ЗаписатьСтрокуЛога("Операции над ИБ """ + СтрокаОбновления.Имя 
				+ """ выполнены " + ?(БылиОшибкиТекБД, "С ОШИБКАМИ!", "УСПЕШНО!"), 1);			

		КонецЦикла;	
		
	КонецЦикла;

	Логирование.ЗаписатьСтрокуЛога("-------------------------------------------------------");
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Все операции выполнены " + ?(БылиОшибки,"С ОШИБКАМИ!", "УСПЕШНО!"));

	Возврат БылиОшибки;

КонецФункции

// ********************************************************************************************
Инициализация();